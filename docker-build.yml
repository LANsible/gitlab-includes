---
variables:
  # You should overide this variable in the subsequent gitlab-ci file
  # Where to the branch and tagged images will be pushed
  # DOCKER_IMAGE_NAME: lansible/ubuntu
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  # build-args to add to the build
  # BUILD_ARGS: --build-arg VERSION=2.9 --build-arg TEST=true
  BUILD_ARGS: ""

.build:
  tags:
    - local  # do not run on shared runner
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    DOCKER_IMAGE_TAG: ${CI_COMMIT_SHA}
  # no need to run for tags, image commit should be built already
  except:
    - tags
  script:
    # Setup buildx not default bundled
    # https://github.com/docker/buildx/#binary-release
    - mkdir -p /root/.docker/cli-plugins/
    - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64
    - chmod a+x ~/.docker/cli-plugins/docker-buildx

    # Get last part of job name as architecture
    - export ARCHITECTURE=$(echo ${CI_JOB_NAME} | grep -o '[^_]*$')

    # Register qemu cross compile for other then host arch (amd64)
    - if [ "${ARCHITECTURE}" != "amd64" ]; then
        docker run --rm --privileged tonistiigi/binfmt --install ${ARCHITECTURE};
      fi

    # Show command to run
    - echo docker buildx build
        --platform=linux/${ARCHITECTURE}
        --progress=plain
        ${BUILD_ARGS}
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        --label "org.opencontainers.image.authors='Wilmar den Ouden <info@wilmardenouden.nl>'"
        --label "org.opencontainers.image.documentation='https://github.com/LANsible/${CI_PROJECT_NAME}'"
        --label "org.opencontainers.image.source='https://github.com/LANsible/${CI_PROJECT_NAME}'"
        --label "org.opencontainers.image.version='${CI_COMMIT_REF_SLUG}'"
        --label "org.opencontainers.image.vendor=LANsible"
        --label "org.opencontainers.image.title='${CI_PROJECT_TITLE}'"
        --tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}-${ARCHITECTURE}
        --push .

    # Build and push container
    - docker buildx build
        --platform=linux/${ARCHITECTURE}
        --progress=plain
        ${BUILD_ARGS}
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        --label "org.opencontainers.image.authors='Wilmar den Ouden <info@wilmardenouden.nl>'"
        --label "org.opencontainers.image.documentation='https://github.com/LANsible/${CI_PROJECT_NAME}'"
        --label "org.opencontainers.image.source='https://github.com/LANsible/${CI_PROJECT_NAME}'"
        --label "org.opencontainers.image.version='${CI_COMMIT_REF_SLUG}'"
        --label "org.opencontainers.image.vendor=LANsible"
        --label "org.opencontainers.image.title='${CI_PROJECT_TITLE}'"
        --tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}-${ARCHITECTURE}
        --push .

.retag:
  variables:
    # Always use commit sha as source
    SOURCE_DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    SOURCE_DOCKER_IMAGE_TAG: ${CI_COMMIT_SHA}
  script:
    # Get last part of job name as architecture
    - export ARCHITECTURE=$(echo ${CI_JOB_NAME} | grep -o '[^_]*$')
    # Pull previous build image for retagging
    - for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30; do
        docker pull ${SOURCE_DOCKER_IMAGE_NAME}:${SOURCE_DOCKER_IMAGE_TAG}&& break || sleep 3m;
      done
    # Retag source to target image
    - echo "Tagging ${SOURCE_DOCKER_IMAGE_NAME}:${SOURCE_DOCKER_IMAGE_TAG} to
        ${TARGET_DOCKER_IMAGE_NAME}:${TARGET_DOCKER_IMAGE_TAG}-${ARCHITECTURE}"
    - docker tag
        ${SOURCE_DOCKER_IMAGE_NAME}:${SOURCE_DOCKER_IMAGE_TAG}-${ARCHITECTURE}
        ${TARGET_DOCKER_IMAGE_NAME}:${TARGET_DOCKER_IMAGE_TAG}-${ARCHITECTURE}

    - docker push ${TARGET_DOCKER_IMAGE_NAME}:${TARGET_DOCKER_IMAGE_TAG}-${ARCHITECTURE}

.manifest:
  image: lansible/manifest-tool:master
  stage: manifest
  script:
    # Push manifest
    - manifest-tool push from-args
        --ignore-missing
        --platforms linux/amd64,linux/arm64,linux/arm
        --template "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}-ARCH"
        --target "${DOCKER_IMAGE_NAME}:${DOCKER_MANIFEST_TAG}"


# Build stage
build_amd64:
  extends: .build
  stage: build

build_arm64:
  extends: .build
  stage: build

# Push branch image
.retag_branch:
  extends: .retag
  stage: push
  variables:
    TARGET_DOCKER_IMAGE_NAME: ${DOCKER_IMAGE_NAME}
    TARGET_DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  only:
    - branches

retag_branch_amd64:
  extends: .retag_branch

retag_branch_arm64:
  extends: .retag_branch

.manifest_branch:
  extends: .manifest

push_branch_manifest:
  extends: .manifest
  variables:
    DOCKER_MANIFEST_TAG: ${CI_COMMIT_REF_SLUG}
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  only:
    - branches


# Push tagged release
.retag_tag:
  extends: .retag
  stage: push
  variables:
    TARGET_DOCKER_IMAGE_NAME: ${DOCKER_IMAGE_NAME}
    TARGET_DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}
  only:
    - tags

push_tag_amd64:
  extends: .retag_tag

push_tag_arm64:
  extends: .retag_tag


# Setup manifests
.manifest_tag:
  extends: .manifest
  only:
    - tags

push_tag_manifest:
  extends: .manifest_tag
  variables:
    DOCKER_MANIFEST_TAG: ${CI_COMMIT_TAG}
    DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}

push_latest_manifest:
  extends: .manifest_tag
  variables:
    DOCKER_MANIFEST_TAG: latest
    DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}

# Push readme to Docker Hub
# https://www.sanisimov.com/2019/03/building-docker-images-for-multiple-architectures/
push_readme:
  stage: manifest
  script:
    - apk add --no-cache jq curl
    - 'token=$(
        curl -s -X POST
          -H "Content-Type: application/json"
          -d "{\"username\": \"$DOCKER_USERNAME\", \"password\": \"$DOCKER_PASSWORD\"}"
          https://hub.docker.com/v2/users/login/
        | jq -r .token
      )'
    - 'jq -n --arg msg "$(<README.md)" "{\"registry\":\"registry-1.docker.io\",\"full_description\": \"$msg\"}"
      | curl -s -o /dev/null -L -w "%{http_code}"
          https://cloud.docker.com/v2/repositories/"${DOCKER_IMAGE_NAME}"/
          -d @- -X PATCH
          -H "Content-Type: application/json"
          -H "Authorization: JWT ${token}"'
  only:
    - tags
